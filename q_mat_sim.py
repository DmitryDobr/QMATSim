# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QMatSim
                                 A QGIS plugin
 QGIS to MatSim
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-10-07
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Dmitry D.
        email                : dmitrdobr@mail.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .q_mat_sim_dialog import QMatSimDialog
import os.path

from .q_mat_sim_tasks import NodeXmlTask, LinkXmlTask, LINE_LINK_XML_TASK_DESCRIPTION, POINT_NODE_XML_TASK_DESCRIPTION

from qgis.core import (
    Qgis,
    QgsVector,
    QgsProject, 
    QgsVectorLayer, 
    QgsGeometry,
    QgsFeature, 
    QgsFeatureIterator, 
    QgsPointXY, 
    QgsTask,
    QgsField,
    QgsFields,
    QgsTaskManager,
    QgsCoordinateReferenceSystem
)

from qgis.PyQt import QtXml
from qgis.PyQt.QtCore import QTextStream, QFile, QIODevice

class QMatSim:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QMatSim_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&QMatSim')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.task_manager = QgsTaskManager()  
        self.task_manager.statusChanged.connect(self.statusChanged)
        self.task_manager.progressChanged.connect(self.taskProgresChanged)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QMatSim', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/q_mat_sim/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'QMatSim'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&QMatSim'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = QMatSimDialog()

            self.dlg.pushButton_create.clicked.connect(self.startTask)
            self.dlg.pushButton_saveFile.clicked.connect(self.saveXmlFile)

            self.dlg.pushButton_createNodes.clicked.connect(self.createNodes)
            self.dlg.pushButton_createLinks.clicked.connect(self.createLinks)
            
            self.doc = None
            self.NodesResult = None
            self.LinksResult = None

        self.dlg.resetGUI()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass


    def createLinks(self): # create line layer for links
        vectorLayer = QgsVectorLayer("LineString", "links", "memory") # create temporary layer
        vectorLayer.setCrs(QgsCoordinateReferenceSystem("EPSG:3857"))
        vectorLayer.dataProvider().addAttributes( [QgsField('id',           QVariant.Int)] )
        vectorLayer.dataProvider().addAttributes( [QgsField('freespeed',    QVariant.Double)] )
        vectorLayer.dataProvider().addAttributes( [QgsField('capacity',     QVariant.Int)] )
        vectorLayer.dataProvider().addAttributes( [QgsField('permlanes',    QVariant.Int)] )
        vectorLayer.dataProvider().addAttributes( [QgsField('_oneway',    QVariant.Int)] )
        vectorLayer.updateFields()

        QgsProject.instance().addMapLayer(vectorLayer)
        self.dlg.mMapLayerComboBox_links.setLayer(vectorLayer)

    def createNodes(self): # create point layer for nodes
        vectorLayer = QgsVectorLayer("Point", "nodes", "memory") # create temporary layer
        vectorLayer.setCrs(QgsCoordinateReferenceSystem("EPSG:3857"))
        vectorLayer.dataProvider().addAttributes( [QgsField('id',  QVariant.Int) ])
        vectorLayer.updateFields()

        QgsProject.instance().addMapLayer(vectorLayer)
        self.dlg.mMapLayerComboBox_nodes.setLayer(vectorLayer)
        

    def startTask(self): # start xml tasks
        self.dlg.progressBar.setValue(0)
        self.dlg.textEdit_xmlOutput.clear()
        self.dlg.textEdit_log.clear()

        self.NodesResult = None
        self.LinksResult = None
        self.doc = QtXml.QDomDocument()

        root = self.doc.createElement("network") # QDomElement
        root.setAttribute('name', "equil test network")
        self.doc.appendChild(root)

        taskParams = self.dlg.getSettings() ## dict

        newTask = NodeXmlTask(self.doc, self.dlg.mMapLayerComboBox_nodes.currentLayer(), taskParams)
        newTask.printLog.connect(self.dlg.addLogMessage)
        self.task_manager.addTask(newTask)

        newTask = LinkXmlTask(self.doc, self.dlg.mMapLayerComboBox_links.currentLayer(), self.dlg.mMapLayerComboBox_nodes.currentLayer(), taskParams)
        newTask.printLog.connect(self.dlg.addLogMessage)
        self.task_manager.addTask(newTask)

    def statusChanged(self, taskId, status): # task status changed
        if (status == 3):
            if (self.task_manager.task(taskId).description() == LINE_LINK_XML_TASK_DESCRIPTION):
                self.LinksResult = self.task_manager.task(taskId).resultDom
            if (self.task_manager.task(taskId).description() == POINT_NODE_XML_TASK_DESCRIPTION):
                self.NodesResult = self.task_manager.task(taskId).resultDom

            if (self.NodesResult != None and self.LinksResult != None):
                root = self.doc.elementsByTagName("network").item(0) # QDomElement

                root.appendChild(self.NodesResult)
                root.appendChild(self.LinksResult)

                self.dlg.textEdit_xmlOutput.append('<?xml version="1.0" encoding="utf-8"?>')
                self.dlg.textEdit_xmlOutput.append(self.doc.toString())
                
                self.dlg.pushButton_saveFile.setEnabled(True)
                
        if (status == 4):
            self.dlg.tabWidget_xml.setCurrentWidget(self.dlg.tab_log)
            for task in self.task_manager.activeTasks():
                    task.cancel()
        
    def taskProgresChanged(self, task_id, progress): # change progressbar
        self.dlg.progressBar.setValue(int(progress))

    def saveXmlFile(self): # save result to xml file
        file = QFile(self.dlg.mQgsFileWidget.filePath())
        file.open(QIODevice.WriteOnly | QIODevice.Text)
        stream = QTextStream(file)
        stream << '<?xml version="1.0" encoding="utf-8"?>\n'
        stream << '<!DOCTYPE network SYSTEM "http://www.matsim.org/files/dtd/network_v1.dtd">\n'
        stream << self.doc.toString()
        file.close()

            
    

        
